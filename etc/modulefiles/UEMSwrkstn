#%Module######################################################################
#
#  This module file is used to define the environment for running the Unified
#  Environmental Modeling System (UEMS) on a stand-alone workstation or cluster.
#
#  To use this module:
#
#     1.  Make sure the configuration is correct in the top part of this file
#         Note that when editing as modulefile the "setenv" statements MUST
#         have a value, i.e, "setenv VAR SOMETHING", or be commented out.
#
#     2.  Either place this file in the system modulefiles directory, which is
#         most likely /etc/modulefiles, or a specified location within the
#         user's home directory.
#
#     3.  Then on the command line, "module load UEMSwrkstn", or
#         place the name of the module in ${HOME}/.modulerc
#         
#  Author:  Robert Rozumalski - NWS/OCLO/FDTD
##############################################################################
#

proc ModulesHelp { } {
   puts "Sets the working environment for the development side Unified Environmental"
   puts "Modeling System (UEMS) on a workstation or cluster. It's fun, try it. All"
   puts "the cool modelers would be doing it, if there were any. You can be the first!"
}

module-whatis   "Sets the working environment for the UEMS"


#  We will stick to the approved module naming convention for the time being,
#  which is {package name}-{user}/${version} or something like that. Thus the
#  following variables must be set.
#
set lname uems
set user  wrkstn
set ver   UVERSION



#  ****************************************************************************
#  IMPORTANT - Set the top level of the UEMS. This must be correct for 
#  everything to operate as advertised. At least that is the plan.
#  ****************************************************************************
#


#  Define the location of the development & live sides of the UEMS on WCOSS
#
setenv UEMS   /awips2/uems


#  We begin with some configurable parameters that serve the greater good of
#  almost all of humanity as well as the UEMS, just the way it should be.
#

#  UEMS_LOCAL
#
#     Setting the UEMS_LOCAL environment variable tells the UEMS that the default
#     location for the EMS_RUN directory (Default: uems/runs) is to be reassigned to
#     another location. You would set UEMS_LOCAL = 1 if the UEMS is being controlled
#     a "UEMS administrator" but there will be multiple users creating domains and
#     running simulations, such as in a classroom setting.
#
#     If UEMS_LOCAL is set, then the new locations for EMS_RUN and EMS_LOGS will be
#     defined by the RUNS_HOME variable below. Additionally, if the user is in
#     the development group then UEMS_LOCAL will be reset to 0.
#
setenv UEMS_LOCAL 0



#  RUNS_HOME
#
#     In the event that UEMS_LOCAL = 1, RUNS_HOME will define the top level of the 
#     user's working directory, i.e., where "uems/runs" and "uems/logs" will be 
#     located. If UEMS_LOCAL is not defined (or 0) then RUNS_HOME will be ignored
#     and $EMS_RUN and $EMS_LOGS will be assigned their default locations. If 
#     UEMS_LOCAL = 1 but RUNS_HOME is not defined or invalid, then the top level
#     of the user's home directory, $env(HOME), will be used.
#
#     If a single large multi-user space is to be used for running the UEMS, it is
#     recommended that RUNS_HOME be set to something like "<path to space>/$env(USER)".
#
setenv RUNS_HOME $env(HOME)



#  MPICH_HOME
#  
#     MPICH_HOME defines location of the MPICH executables on your system. By default,
#     the UEMS will use the pre-compiled executables located under uems/util/mpich2,
#     which in most cases should be fine. However, if you would like to use a locally
#     compiled version of MPICH or the package provided with your Linux distibution
#     you may do so by specifying the location of MPICH below. If MPICH_HOME is 
#     commented out or blank the UEMS provided package will be used.
#
#     DWIZ users - If using an alternate MPICH installation, you will need to create
#     a link from $MPICH_HOME/bin/mpiexec.gf to $MPICH_HOME/bin/mpiexec.gforker:
#
#       cd $MPICH_HOME/bin
#
#       #  ln -s mpiexec.gforker mpiexec.gf 
#
setenv MPICH_HOME $env(UEMS)/util/mpich2



#  SOCKETS and CORES
#
#     SOCKETS defines the number of physical processors (sockets) on that reside on your
#     local system. These variables provide guidance to the UEMS when running a simulation
#     on the local system. The actual number of processors (maximum = sockets*cores) is
#     assigned in the run_ncpus.conf file, which is part the configuration for each 
#     run-time domain. SOCKETS is simply the number of physical processors that you 
#     could touch if you were to open up the computer case and move the large heat sinks. 
#     Most stand-alone workstations have either 1 or 2 of these physical CPUs although 
#     some most exotic and expensive mainboards can support 8 or more, but you probably 
#     don't have one of those.

#     CORES defines the number of cores contained within each of those touchable CPUs,
#     or in other words, the number of "CORES per SOCKET". You can find this infomation
#     by reading the system /proc/cpuinfo file, or by running the "lscpu" utility.
#
setenv SOCKETS 10
setenv CORES   1



#  EMS_NAWIPS
#
#     The EMS includes the NAWIPS the diagnostic and display system. Just because one
#     of the many mottos here at EMS world headquarters is "Giving more of what they
#     need, whether they need it or not!".
#
#     By default the EMS_NAWIPS setting is commented out. You may remove the '#' if you
#     want to use NAWIPS.  If you have your own NAWIPS release installed and wish to
#     use it instead, you may either replace the path to the EMS provided release with
#     your own or leave EMS_NAWIPS blank and set the NAWIPS environment outside this file.
#
setenv EMS_NAWIPS $env(UEMS)/util/nawips


#  MAILX
#
#     MAILX defines the routine to use when sending you informative messages or pearls of
#     nonsensical wisdom, which it tends to do from time to time, especially following a
#     mail real-time forecast. On most Linux systems the "/bin/mailx" utility is used
#     for this purpose but it must also be properly configured to send mail, which is why
#     this option is turned OFF by default.
# 
#     Note that the email recipients are defined in the ems_autorun.conf file located
#     beneath the individual run-time domain directories.
#
#setenv MAILEXE  /bin/mailx



#  HTTP_PROXY
#            
#     The HTTP_PROXY environment variable is used when your local network has a proxy
#     server which accepts http requests on some port other then 1080. Symptoms of this 
#     problem would be if you are unable to connect to outside data sources via http    
#     when running ems_prep or ems_autorun.  For most users this is not a problem, in   
#     which case HTTP_PROXY should be left blank. If you know this is the case for      
#     your system then set the HTTP_PROXY to:                                           
#                                                                                       
#       HTTP_PROXY = <IP address of server>:<port used>                                 
#                                                                                       
#     For example, if proxy server 192.168.150.10 used port 80:                         
#                                                                                       
#       HTTP_PROXY = 192.168.150.10:80                                                  
#                                                                                       
#     If the proxy server requires a user name and password
#
#       HTTP_PROXY = <user>:<passwd>@<IP address>:<port used>
#
#setenv HTTP_PROXY


#  MPIEXEC_PORT_RANGE
#
#     Setting MPICH_PORT_RANGE will override the default range of ports to use when communicating
#     to the other hosts while using MPICH2. If you want to change the default values, simply set
#     MPIEXEC_PORT_RANGE = <lowest port>:<highest port>, for example:
#
#         MPIEXEC_PORT_RANGE  = 50001:59999
#
#     The range specified below can be overridden from the run_ncpus.conf file with the
#     MPICH_PORT_RANGE parameter. Should you not do anything then MPICH2 will select the
#     ports to use all by itself and you will like it.  Leave commented out unless you plan
#     on using it.
#
#setenv MPIEXEC_PORT_RANGE


#  FTP_PASSIVE
#
#     FTP_PASSIVE specifies that all FTP transfers be done in either PASSIVE (1) or
#     non PASSIVE (0) mode.
#
setenv FTP_PASSIVE 1


#  LSF_SYS
#
#     Set LSF_SYS = 1 if the UEMS is being run on a system that uses a Load Sharing Facility
#     (LSF) and batch job scheduler to submit large jobs. This is usually the case when
#     running on a large multi-user system within a High Performance Computing environment.
#     Setting LSF_SYS = 1 will instruct the UEMS run-time scripts to create and submit the
#     MPI run portions of the system to the batch job scheduler rather than run directly
#     from the command line.
#
setenv LSF_SYS 0


#  ----------------------------------------------------------------------------------
#  UEMS package environment variables - Here top level "UEMS" value is used to set
#  "EMS", which, in turn defines all the other environment variables. This is
#  done to avoid mashing of variables with older versions of the EMS still running
#  on a system.
#  ----------------------------------------------------------------------------------
#
setenv EMS          $env(UEMS)
setenv EMS_HOME     $env(EMS)

setenv EMS_BIN      $env(EMS_HOME)/bin
setenv EMS_DATA     $env(EMS_HOME)/data

setenv EMS_STRC     $env(EMS_HOME)/strc
setenv STRC_BIN     $env(EMS_STRC)/Ubin
setenv STRC_PREP    $env(EMS_STRC)/Uprep
setenv STRC_RUN     $env(EMS_STRC)/Urun
setenv STRC_POST    $env(EMS_STRC)/Upost
setenv STRC_AUTO    $env(EMS_STRC)/Uauto
setenv STRC_UTIL    $env(EMS_STRC)/Uutils

setenv EMS_RUN      $env(EMS_HOME)/runs
setenv EMS_LOGS     $env(EMS_HOME)/logs


#  Make sure UEMS_LOCAL and RUNS_HOME have values, even if not being used
#
if { ! [info exists ::env(UEMS_LOCAL) ] } {setenv UEMS_LOCAL 0}
if { $env(UEMS_LOCAL) != 0 }     {setenv UEMS_LOCAL 1}

if { ! [info exists ::env(RUNS_HOME) ] } {setenv RUNS_HOME 0}
if { $env(RUNS_HOME) == 0 } {setenv RUNS_HOME $env(HOME)}

if { ! [info exists ::env(HTTP_PROXY) ] } {setenv HTTP_PROXY 0}


if { $env(UEMS_LOCAL) == 1 } {

   #  You may change these if UEMS_LOCAL is set.  Notice that the default location
   #  is under the user's home directory; however, if there is to be an alternate
   #  location then use the RUNS_HOME variable to redefine the location.
   #
   setenv EMS_RUN      $env(RUNS_HOME)/uems/runs
   setenv EMS_LOGS     $env(RUNS_HOME)/uems/logs

   if { ! [file isdirectory $env(EMS_RUN)]  } { file mkdir $env(EMS_RUN) }
   if { ! [file isdirectory $env(EMS_LOGS)] } { file mkdir $env(EMS_LOGS) }

   #  This will be used if NAWIPS is included 
   #
   setenv METDAT       $env(RUNS_HOME)/metdat/gempak

}
unsetenv RUNS_HOME; #  No longer needed

setenv RUN_BASE     $env(EMS_RUN)

setenv EMS_UTIL     $env(EMS_HOME)/util
setenv EMS_DOCS     $env(EMS_HOME)/docs
setenv EMS_CONF     $env(EMS_HOME)/conf
setenv EMS_ETC      $env(EMS_HOME)/etc

setenv EMS_UBIN     $env(EMS_UTIL)/bin
setenv EMS_MPI      $env(EMS_UTIL)/mpich2

setenv DATA_GEOG    $env(EMS_DATA)/geog
setenv DATA_TBLS    $env(EMS_DATA)/tables

setenv DW           $env(EMS_HOME)/domwiz
setenv DW_BIN       $env(DW)/bin
setenv DW_LIB       $env(DW)/libs


if { $env(UEMS_LOCAL) == 0 } {
   #  For those determined to build your own UEMS - Bless You!
   #
   setenv EMS_BUILD   $env(EMS_UTIL)/UEMSbuild

   setenv BUILD_SRC   $env(EMS_BUILD)/src
   setenv BUILD_LIBS  $env(EMS_BUILD)/libs
   setenv BUILD_BIN   $env(EMS_BUILD)/bin

   setenv SRC_LIBS    $env(BUILD_SRC)/libs
   setenv SRC_UTILS   $env(BUILD_SRC)/utils
   setenv SRC_POST    $env(BUILD_SRC)/post
   setenv SRC_MODELS  $env(BUILD_SRC)/models


   setenv EWRF        $env(EMS_BUILD)/src/models/wrf
   setenv EWPS        $env(EMS_BUILD)/src/models/wps
   setenv EPOST       $env(EMS_BUILD)/src/post/emsupp/src
   setenv EBUFR       $env(EMS_BUILD)/src/post/emsbufr


   #  The following compiler variables are used when building
   #  the system and may need to change someday.
   #
   setenv COMPLC      pgi
   setenv COMP        Pgi
}

setenv MPSTKZ 512M
setenv OMP_STACKSIZE 64M
setenv MP_STACK_SIZE $env(OMP_STACKSIZE)

setenv NO_STOP_MESSAGE 1  
setenv UEMS_MODULE     1



# Set the value of OMP_NUM_THREADS to be the number of
# cores * physical cpus
#
set nprocs [expr $env(SOCKETS) * $env(CORES)]
setenv OMP_NUM_THREADS $nprocs


#  Set the GrADS environment variables
#
setenv GADDIR $env(EMS_UTIL)/grads/data
setenv GAUDFT $env(EMS_UTIL)/grads/data/tables
setenv GASCRP $env(EMS_UTIL)/grads/scripts


#  Set the NAWIPS environment variables
#
if { [info exists ::env(EMS_NAWIPS) ] && [file isdirectory $env(EMS_NAWIPS)] } {
    setenv   NAWIPS $env(EMS_NAWIPS)
    unsetenv EMS_NAWIPS
    module load UEMSnawips
}


#  Set the NCVIEW environment variables
#
setenv UDUNITS2_XML_PATH $env(EMS_UTIL)/ncview/udunits/udunits2.xml
setenv NCVIEWBASE        $env(EMS_UTIL)/ncview/lib
setenv XAPPLRESDIR       $env(EMS_UTIL)/ncview/app-defaults

set-alias  ncview {ncview -extra -minmax med -private -no1d}


set xresources ""
if { [file isdirectory $env(XAPPLRESDIR)] } {
    set xresources "$env(EMS_UTIL)/ncview/app-defaults/%N"
    if { [info exists ::env(XUSERFILESEARCHPATH)] } {
        prepend-path  XUSERFILESEARCHPATH $xresources
    } else {
        setenv XUSERFILESEARCHPATH ${xresources}
    }
}


#   Additions to HTTP_PROXY
#
if { [info exists ::env(HTTP_PROXY) ] && $env(HTTP_PROXY) != 0 } {
    setenv http_proxy "http://$env(HTTP_PROXY)"
}
unsetenv HTTP_PROXY


#  Make sure the paths are correctly set and place the UEMS paths up front
#
prepend-path   PATH   $env(EMS_UTIL)/HDFView/bin
prepend-path   PATH   $env(EMS_UTIL)/ncview/bin
prepend-path   PATH   $env(EMS_MPI)/bin
prepend-path   PATH   $env(GADDIR)
prepend-path   PATH   $env(EMS_UTIL)/bin
prepend-path   PATH   $env(EMS_UTIL)/grads/bin
prepend-path   PATH   $env(EMS_BIN)
prepend-path   PATH   $env(DW_BIN)
prepend-path   PATH   $env(STRC_BIN)
prepend-path   PATH   .


#  Done!
