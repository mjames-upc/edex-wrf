#!/usr/bin/perl
#===============================================================================
# CAVEAT HACKOR: DO NOT EDIT THIS FILE!  Why?  Because this file will be 
#                overwritten when you run the "BuildModules.csh" script from
#                the uems/util/UEMSbuild/strc/UEMSdomain directory, which is
#                where you should be making your changes, not here.
#
#         FILE:  ems_domain.pl
#
#  DESCRIPTION:  The ems_domain.pl routine is used to manually localize a
#                computational domain rather than using the domain wizard.
#                The routine is very flexible with lots of user options
#                so start by reading the help pages or user guide if you
#                have any questions.
#
#       AUTHOR:  Robert Rozumalski - NWS
#      VERSION:  18.3.1
#      CREATED:  08 March 2018
#===============================================================================
#
use warnings;
use strict;
require 5.008;
use English;

use Cwd 'abs_path';
use FindBin qw($RealBin);
use lib (abs_path("$RealBin/../Uutils"), abs_path("$RealBin/../Udomain"));

use vars qw (%Udomain);

use Ecomm;
use Ecore;
use Eenv;
use Others;



#===============================================================================
#   So ems_domain begins.  Note that while the %Udomain hash is passed into
#   the individual modules, it is global within a module. Any variables that
#   are required later on will be carried in this hash.
#===============================================================================
#
use File::Basename;

    #  Override interrupt handler - Use the local one since some of the local
    #  environment variables are needed for clean-up after the interrupt.
    #
    $SIG{INT} = \&Ecore::SysIntHandle;


    #  Make sure the UEMS environment is set
    #
    &Ecore::SysExit(-1,__FILE__) if &Eenv::SetEnvironment($ENV{UEMS});

    &Ecore::SysExit(1,__FILE__)  if &DomainReturnHandler(&DomainStart());

    &Ecore::SysExit(1,__FILE__)  if &DomainReturnHandler(&DomainProcess());


&Ecore::SysExit(0,__FILE__);


sub DomainStart {
#=====================================================================================
#  This subroutine calls routines that perform the initial configuration for
#  ems_domain prior to any real work being done. The responsibility of this 
#  section is to:
#
#      1. Initialize the %Udomain hash
#      2. Read and parse the user input options
#      3. Check for input and configuration issues 
#
#  Note that the handling of the return is different here than with the other
#  routines as a return of the %Udomain hash indicates success when an empty
#  hash means failure.
#=====================================================================================
#
use Dinit;
use Dconf;
use Doptions;

    return 11 unless %Udomain = &Dinit::Domain_Initialize(\%Udomain);
    return 12 unless %Udomain = &Doptions::Domain_Options(\%Udomain);
    return 13 unless %Udomain = &Dconf::Domain_Configuration(\%Udomain);

return 0;
}


sub DomainProcess {
#=====================================================================================
#  This is the primary driver subroutine for ems_domain. It begins by importing 
#  any domains requested with the --import flag, which are included in the 
#  @{$Udomain{DOMAINS}}.  If no domains were imported then @{$Udomain{DOMAINS}}
#  should contain the domain specified by running ems_domain from a current
#  domain directory or via the --rundir flag.
#=====================================================================================
#
use Dutils;
use Dprocess;
use Cwd;


    #---------------------------------------------------------------------------------
    #  1.  Import any requested domains and add them to the @{$Udomain{DOMAINS}} 
    #      array for further processing.
    #---------------------------------------------------------------------------------
    #  
    my @domains = (@{$Udomain{CONF}{domains}},&Dprocess::ImportRuntimeDomains(\%{$Udomain{CONF}{imports}}));


    #---------------------------------------------------------------------------------
    #  2.  Create a new computational domain if requested
    #---------------------------------------------------------------------------------
    #
    return 21 unless %Udomain = &Dprocess::CreateRuntimeDomain(\%Udomain);


    #---------------------------------------------------------------------------------
    #  3.  Loop through the @{$Udomain{DOMAINS}} array, processing as requested. 
    #      Note that unless the --import flag was passed there should only be 
    #      one domain.
    #---------------------------------------------------------------------------------
    #
    foreach my $emsrun (@domains) {

        return 22 unless chdir $emsrun;

        #  Clean the run-time directory of any useless or old files
        #
        return 23 if &Dutils::RefreshRuntimeDomain($Udomain{CONF}{scour},$emsrun);


        #---------------------------------------------------------------------------------
        #  23.5  If ems_domain.pl is called by DWIZ then there is no need to go further
        #---------------------------------------------------------------------------------
        #
        return 0 if $Udomain{CONF}{dwiz};

        sleep 3;  # Otherwise the information flys by too quickly

        #  Get the run-time domain directory environment
        #
        return 24 unless %{$Udomain{EMSRUN}}   = &Dprocess::DomainRuntimeEnvironment($emsrun);
        #&Ecomm::PrintHash(\%{$Udomain{EMSRUN}});

        #  Read the namelist.wps file
        #
        return 25 unless %{$Udomain{MASTERNL}} = &Dprocess::DomainReadMasterNamelist($Udomain{EMSRUN}{wpsnl});
        #&Ecomm::PrintHash(\%{$Udomain{MASTERNL}});

        #  Update the pathnames in the master namelist file, which probably should 
        #  be the path with links but right now is 
        #
        return 26 unless %{$Udomain{MASTERNL}} = &Dprocess::UpdateMasterNamelistPaths(\%Udomain);
        #&Ecomm::PrintHash(\%Udomain);

        #  Make domain related changes to the master namelist and then write the file to the static directory
        #
        return 27 unless %{$Udomain{MASTERNL}} = &Dprocess::UpdateMasterNamelistDomain(\%Udomain);
        #&Ecomm::PrintHash(\%{$Udomain{MASTERNL}{GEOGRID}});

        return 28 if &Dprocess::LocalizeRuntimeDomain(\%Udomain);


        return 0 if $Udomain{CONF}{mcserver};

        return 29 if &Dprocess::UpdateDomainConfigurationFiles(\%Udomain);
        #&Ecomm::PrintHash(\%{$Udomain{MASTERNL}{GEOGRID}});

    }


return 0;
}


sub DomainReturnHandler {
#=====================================================================================
#  The purpose of this routine is to interpret the return codes from the various
#  ems_domain subroutines. The value that is returned identifies the routine from
#  which it was passed and any specific error, where the 10's digit identifies
#  the routine and the 1s is the error. Some routines may provide more error
#  information than others.
#
#  The routine itself returns 0 (ems_domain carries on) for success or 1 (ems_domain
#  terminates) for failure.
#=====================================================================================
#
    my $rc = shift;

    my $umesg = (defined $ENV{DMESG} and $ENV{DMESG}) ? $ENV{DMESG} : '';

    #  Return codes 11 - 19 are reserved for the Dstart Module
    #
    if ($rc == 11) {&Ecomm::PrintMessage(6,9,144,1,1,'Apparently, the &Domain_Initialize routine routine is upset with you at the moment');}

    if ($rc == 21) {&Ecomm::PrintMessage(6,9,144,2,1,'There appears to be a problem in &DomainRuntimeEnvironment');}
    if ($rc == 22) {&Ecomm::PrintMessage(6,9,144,2,1,'Who moved my run-time directory?!');}
    if ($rc == 23) {&Ecomm::PrintMessage(6,9,144,2,1,'There appears to be a problem in &RefreshRuntimeDomain');}
    if ($rc == 24) {&Ecomm::PrintMessage(6,9,144,2,1,'There appears to be a problem in &DomainRuntimeEnvironment');}
    if ($rc == 25) {&Ecomm::PrintMessage(6,9,144,2,1,'There appears to be a problem in &DomainReadMasterNamelist');}
    if ($rc == 26) {&Ecomm::PrintMessage(6,9,144,2,1,'There appears to be a problem in &UpdateMasterNamelistPaths');}
    if ($rc == 27) {&Ecomm::PrintMessage(6,9,144,2,1,'There appears to be a problem in &UpdateMasterNamelistDomain');}
    if ($rc == 28) {&Ecomm::PrintMessage(6,9,144,2,1,'There appears to be a problem while localizing your domain (&LocalizeRuntimeDomain)');}
    if ($rc == 29) {&Ecomm::PrintMessage(6,9,144,2,1,'There appears to be a problem while updating domain configuration (&UpdateDomainConfigurationFiles)');}
    

return $rc ? 1 : 0;
}



