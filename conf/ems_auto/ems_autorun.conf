# ==============================================================================================
# THE UEMS AUTO RUN CONFIGURATION FILE
# ==============================================================================================
#
# SO WHAT DOES THIS CONFIGURATION FILE DO FOR ME?
#
#   Below you will find parameters that control the end-to-end process of running
#   a simulation, from acquiring initialization data, preparing and executing the
#   model run, and then post processing the simulation output. The ems_autorun
#   routine was developed for both real-time forecasting and case study purposes;
#   however, if you are with the NWS, use of the UEMS to support operations is not
#   officially sanctioned. Please review and modify as necessary.
#
#   The ems_autorun routine is designed to run ems_prep, ems_run and ems_post in
#   succession. Therefore, it is important that the configuration files be modified
#   or set to the desired values before attempting to sue this script.  Additionally,
#   it is highly recommended that ems_prep, ems_run and ems_post be run individually
#   in succession prior to using ems_autorun, just to ensure that everything works
#   as expected.  Surprises happen, just don't let the bad ones happen to you.
#
#   Configuration parameters designed ONLY for use with real-time forecasting are
#   identified by "REAL-TIME FORECASTS". All other parameters may be used for both
#   real-time and case study purposes.
#
#
# ADDITIONAL CASE STUDY USE NOTE
#
#   When using the ems_autorun routine for case studies, be sure to pass the "--date",
#   "--cycle", and "--length" options, i.e.,
#
#     %   ems_autorun --date YYYYMMDD  --cycle HH  --length
#
#  LOG:  R.Rozumalski - NWS April 2016
#
# ==============================================================================================
# ==============================================================================================
#

#  DSETS = <dataset #1>,<dataset #2>,<dataset #3>,...,<dataset #N>
#
#    DSETS is list of datasets, in order of priority and separated by commas,
#    to use for initializing your UEMS simulation. The datasets specified
#    in DSET take on the same format as those in the ems_prep "--dset" option
#    except that multiple datasets may be listed (separated by a comma). The
#    additional datasets listed serve as fail-over options should the higher
#    priority data not be available.
#
#    A VERY simple example would be:
#
#      DSETS = gfspt,gfs,previous
#
#    Wherein the UEMS will attempt to get the current cycle gfspt files
#    from all the available servers listed in gfspt_gribinfo.conf. If the
#    target gfspt files are not available then the UEMS will attempt to
#    download the full global 0.5 degree GFS files (gfs) from the locations
#    defined in gfs_gribinfo.conf. Should that fail, the UEMS will attempt to
#    acquire and initialize the simulation with the GFS files (gfs) from the
#    previous cycle run.
#
#    When using the "previous" option, the UEMS will determine the appropriate
#    forecast hour from the previous cycle of a model run such that the 00 hour
#    forecast will be the same date and time as if it were initialized with
#    the current cycle run.  For example, if the current 12 UTC cycle of the GFS
#    was not available, the UEMS would download the 06 hour forecast from the
#    previous 06 UTC GFS run. In either case the 00 hour forecast of your UEMS run
#    would be 12 UTC.
#
#    Each <dataset> takes the SAME format as the arguments to the --dset option
#    in ems_prep, which is "dataset[%bcdataset]:method:source:loc" for all the
#    gory details see the --dset option in the UEMS users guide. You will be
#    very sorry that you looked.
#
#    Important, While the DSETS option below may be overridden by the --dsets flag,
#    the behavior of each is slightly different in that you can not pass fail-
#    over datasets as an argument to --dset <args>. Passing multiple datasets,
#    separated by a comma to --dset results in the first dataset being used for
#    the initial conditions and the second for the boundary conditions, i.e,
#
#      % ems_autorun --dset hrrr,gfs  is same as  % ems_autorun --dset hrrr%gfs
#
#  DEFAULT: DSETS = gfspt,gfs,previous
#
DSETS = gfspt,gfs,previous



#  SFC = <static sfc dataset #1>,<static sfc dataset #2>,...,<static sfc dataset #N>
#
#    SFC defines the static surface dataset(s) to use in place of, or in addition to,
#    those fields provided by the initial and boundary condition datasets (DSETS).
#
#    For example, if you with to use an alternate SST dataset to that provided
#    by the initial and boundary conditions (DSETS) then you would specify those
#    data with SFC.  Multiple datasets may be listed by separating the names
#    with commas or left blank if this option is of no interest to you.
#
#    Note that unlike the DSETS option above, there are no explicit fail-over
#    mechanisms should a surface data be unavailable. This is because it is
#    assumed that all the fields necessary for model initialization are provided
#    by the datasets specified by DSETS. Should a surface dataset not be available
#    the show will move on without it.
#
#    It is possible to provide fail-over datasets by simply including them in the
#    list. Make sure that the HIGHER priority dataset PRECEDES the LOWER priority
#    one in the list. The WRF WPS will use both datasets but the higher priority
#    data will replace the lower priority values over the area covered by the
#    higher priority data.
#
#    A VERY simple example would be:
#
#      SFC = ssthires,sstlowres
#
#    In which case the UEMS will attempt to download both datasets but the values
#    from ssthires will replace those from sstlowres in the model initial conditions.
#
#    Finally, The SFC setting defined below may be overridden by the --sfc command-line option.
#
#  DEFAULT: SFC = <blank>
#
SFC =



#  SYNCSFC = <sfc dataset>,<sfc dataset>,...
#
#    SYNCSFC tells the UEMS to select the SFC data used for initialization such that
#    the validation hour is closest in time to the model initialization hour. When using
#    SYNCSFC, the UEMS will ignore other available data times within a 24 hour day in favor
#    of a dataset that best matches the simulation initialization hour. The UEMS will look
#    for datasets with the same validation hour going back over the period of N days as
#    defined by the AGED parameter in the <dataset>_gribinfo.conf file.
#
#    WHY DO THIS?
#
#    Some datasets, such as MODIS SSTs have a diurnal signal that needs to be taken
#    into account when initializing a simulation. It may not be appropriate to use a
#    dataset from 00Z for a simulation at 12Z even if that is the most recent time
#    available. If SYNCSFC = <dataset> then the UEMS will look for the 12Z files
#    from the previous AGED days.
#
#    Note that the dataset valid times do not have to exactly match the simulation
#    initialization time. The UEMS will determine the closest available hour to the
#    initialization hour and use that value.
#
#    For use with SFC datasets during wild UEMS-driven parties only!
#
#  DEFAULT: SYNCSFC = <blank>
#
SYNCSFC =



#  LSM = <LSM dataset #1>,<LSM dataset #2>,...,<LAM dataset #N>
#
#    LSM defines the time-dependent land surface dataset(s) to use in place of,
#    or in addition to, fields provided by the initial and boundary condition
#    datasets (DSETS).
#
#    This option is primarily used to provide fields that are missing from the
#    primary initialization data (DSETS). For example, if NWS LAPS files are used
#    for initialization then a source for the soil moisture and temperature
#    must be found as these fields are missing from the LAPS dataset. In these
#    situations you would include the LSM datasets by specifying them with the
#    LSM parameter below.
#
#    If no LSM fields are needed then simply leave LSM blank.
#
#    Finally, The LSM setting below is overridden by the --lsm command-line option.
#
#    FAIL-OVER OPTIONS WITH LSM DatasetS
#
#    A major difference between the SFC and LSM options is that while the SFC data
#    sets are not mandatory for model initialization, processing will terminate if
#    any of the comma-separated LSM datasets fail to exist. Consequently, any LSM
#    datasets used as fail-over options must be handled differently by ems_prep.
#    Alternate or fail-over LSM datasets may be specified in the LSM list by using
#    the pipe (|) character as a separator. The pipe or "|" separates a series of
#    datasets, each serving as the fail-over for the preceding one. Should one of
#    the datasets in the series be available then the others will not be checked.
#
#    The use of the "|" should not be confused with the comma-separated datasets.
#    The comma is used to separate multiple LSM datasets that are mandatory for
#    initialization. Should one of these datasets not be available then the ems_prep
#    routine will be terminated.
#
#    For example:
#
#    LSM = Alsm1|Alsm2|Alsm3,Blsm1|Blsm2  Use quotations (") with command-line "--lsm" option.
#
#    Assuming that the datasets listed in the above example actually mean anything, the
#    setting specifies that two datasets are required for model initialization, one from
#    group "A", Alsm1|Alsm2|Alsm3 and one from group "B", Blsm1|Blsm2. The ems_prep routine
#    will first attempt to get Alsm1 from group A. Should that dataset not be available it
#    will try to get the Alsm2 dataset, and so on. The ems_prep routine will then attempt
#    to acquire Blsm1 from the second group with Blsm2 serving as a fail-over. Again, should
#    ems_prep fail to locate a dataset from each group model initialization will not proceed.
#
#  DEFAULT: LSM = <blank>
#
LSM =



#  LENGTH
#
#    LENGTH is the length of your primary domain simulation in hours. It is also used
#    to define the maximum length of any child domain simulations if included in the
#    DOMAINS parameter.
#
#    If you are looking for the "INITFH" and "BCFREQ"  parameters that once haunted
#    this file, they can be accessed either through the argument passed to the "--cycle"
#    flag, or by modifying the default values in a uems/conf/gribinfo/<dset>_gribinfo.conf
#    file, where <dset> corresponds to the datasets specified by the DSETS parameter
#    above.  Please see "ems_autorun --help cycle" for more information.
#
#  DEFAULT: LENGTH = 24
#
LENGTH = 24



#  DOMAINS = <domain #:start hr:length>,...,<domain #N:start hr:length>
#
#    DOMAINS defines which domains to include when executing a 1- or 2-way nested
#    simulation. Note that any listed domains must have been created previously
#    when defining your computational domain with dwiz or ems_domain.
#
#    The convention for DOMAINS is:
#
#     DOMAINS = <domain number>:<start hr after domain 1>:<fcst length in hours>
#
#    Where:
#        <domain number> = Domain number 2..n (easy enough). Why not 1..n? It's
#                                   because domain 1 is the primary domain is always
#                                   executed and the length is controlled by influences
#                                   outside the control of this file. That's why!
#
#        <start hr after primary> = The number of hours following the start of the
#                                   domain 1 to begin the sub-domain integration.
#                                   Not including this value will cause the UEMS to
#                                   begin the nested domain run at the same time as
#                                   as the PARENT domain.
#
#                                   A more detailed discussion of the start time is
#                                   provided by the "--domains" option in ems_prep.
#                                   Review the UEMS user guide for the details.
#
#        <fcst length> = Length of the sub-domain simulation (hours). If the
#                                   length of the forecast extends beyond that of the
#                                   parent the run will be terminated with the parent
#                                   simulation.
#
#    For example, if you created 4 nested domains, identified as 02...05 (domain 01
#    is the parent of all domains and thus is not included in the list) and you want
#    to turn ON domains 2,4,and 5 then set DOMAINS = 2,4,5.
#
#      See the runs/<domain>/static/projection.jpg for available domains.
#
#    Note that if you turn a domain ON then you also should include the parent domain.
#    Thus, if domain 3 is a child of 2, and you want to use domain 3 you will need to
#    include domain 2 as well. Conversely, if you only use domain 2 then domain 3
#    does not have to be included.
#
#    Examples:
#
#       DOMAINS = 2:3:12 - Start a simulation on domain 2 three hours after the start
#                          of domain 1 and integrate for 12 hours.
#
#       DOMAINS = 2:3    - Start a simulation on domain 2 three hours after the start
#                          of domain 1 and run through the end of the parent domain
#                          simulation.
#
#       DOMAINS = 2::12  - Start a simulation on domain 2 at the same time as the parent
#                          domain and run for 12 hours.
#
#       DOMAINS = 2:3:12,3:6:12 - Start a simulation on domain 2 three hours after the
#                                 start of domain 1 and integrate for 12 hours. Start
#                                 domain 3 six hours after domain 1 and run for 12 hours (!!).
#
#                                 HOWEVER: Since the requested period of integration on
#                                 domain 3 would extend beyond the termination of its parent
#                                 (domain 2) the run length will be reduced to 9 hours.
#
#    Note that DOMAINS may be overridden by passing the --domains option
#
#  DEFAULT: DOMAINS = <blank>
#
DOMAINS =



#  NUDGING = Yes|No
#
#    Set NUDGING = Yes to turn ON 3D analysis|spectral nudging during a simulation.
#    All the nudging configuration parameters can be found in ems_run/run_nudging.conf
#    and must be specified prior to running ems_autorun.
#
#    The value of NUDGING may be overridden by passing the "--[no]nudging" flag to
#    ems_autorun.
#
#
#  DEFAULT: NUDGING = No
#
NUDGING = No



#  EMSPOST and AUTOPOST  (All|Auto, 0, 1, 2, ..., N)[:dsetA[:dsetB]]
#
#    The EMSPOST and AUTOPOST parameters specify the domains for which you want to turn ON
#    processing of your simulation output, whether it be concurrent (AUTOPOST) or after
#    completion (EMSPOST). The values assigned define domains for which you want to turn
#    processing ON and the datasets to process. Currently, there are two model output
#    datasets available for processing, primary and auxiliary, which are specified as
#    "primary", and "auxiliary" respectively. One or both of these datasets, along with
#    a domain ID, may be included as part of a "rules group", the format for which is
#
#        EMS|AUTOPOST = ID1:dsA:dsB,ID2:dsA:dsB,...,IDN:dsA:dsB
#
#    where id# the domain ID to which to apply the rules, and dsA & dsB are placeholders
#    for the "primary" and/or "auxiliary" datasets, i.e, the "rules". Specifying rules for
#    multiple domains is done by separating individual rule groups with a comma. A default
#    rule group may also be included by excluding a domain ID, i.e, "dsA:dsB,...". This
#    default will be applied to any domain for which concurrent post processing is turned
#    ON that does not have a rule group associated with it. In the absence of a specified
#    default rule group only the "primary" dataset ("wrfout*" for WRF) will be processed.
#    Specifying just a rule group will turn ON processing for ALL domains included in the
#    simulation.
#
#    Leave EMSPOST and AUTOPOST blank or set the value to 0 if you want to turn OFF all
#    processing of the simulation output, which means nothing will be done to the data
#    files following completion of the model run. No BUFR files, no GRIB, no GrADS files
#    and no simulation results exported anywhere. Have it your way and like it.
#
#    Finally, any domains targeted for processing that are not part of the simulation
#    will be ignored. Additionally, to process the auxiliary dataset, the data type
#    must be turned ON within the ems_run configuration. It doesn't just happen all
#    by itself.
#
#  IMPORTANT
#
#    Prior to attempting concurrent processing of simulation output (AUTOPOST), please
#    read the guidance provided in the ems_autopost.conf file. Additionally, it is highly
#    recommended that another system, which is not included in running of the simulation,
#    be configured for concurrent post processing duties. This recommendation is due to
#    the increased system resources needed when processing model output, which may result
#    in a severe degradation in performance.
#
#  EXAMPLES - just examples and NOT a suggested configuration.
#
#      EMSPOST  = 1,3
#      AUTOPOST = 2
#
#    Process the primary output dataset (default) for domains 1 and 3 after the simulation
#    has completed. Turn ON concurrent processing of the primary output dataset (default)
#    for domain 2.
#
#      EMSPOST  = 0
#      AUTOPOST =
#
#    Turn OFF ALL post-processing for domains included in the simulation
#
#      EMSPOST = primary:auxiliary
#
#    Turn ON processing of the primary:auxiliary for ALL domains following completion of the
#    simulation. Remember to turn on output of the auxiliary dataset during the configuration
#    of ems_run.
#
#      AUTOPOST = auxiliary,1:primary,2,3,4:primary:auxiliary
#
#    Turn ON concurrent processing for domains 1,2,3, & 4 with the following rules:
#
#      Domain  1      - primary dataset only
#      Domains 2 & 3  - auxiliary dataset only (specified default)
#      Domain  4      - primary & auxiliary datasets
#
#    Finally,
#
#      EMSPOST = Auto
#
#    Turn ON post-processing of the primary output dataset for all domains in the simulation.
#
#  DEFAULT:  EMSPOST  = Auto
#  DEFAULT:  AUTOPOST = 0
#
EMSPOST  = Auto
AUTOPOST =



#  USERS (REAL-TIME FORECASTS)
#
#    USERS is a list of email address(es) to which notifications will be sent should
#    there be a problem with ems_autorun, such as in the event of a failed forecast.
#    This option is intended for real-time forecasting purposes and assumes proper
#    configuration of mail services on the local system (See MAILX in the environment
#    settings file; uems/etc/UEMS.cshrc|profile).
#
#    Individual addresses are separated by commas. Leave USERS blank if you don't
#    want mail sent or MAILX is not configured.
#
#      USERS = user1@mailbox, user2@mailbox, user3@mailbox
#
#  DEFAULT: USERS = <blank>
#
USERS =


#  SCOUR (Yes | No)
#
#    SCOUR specifies the desired level of domain directory "scouring" prior to
#    beginning the forecast process. The meaning of each integer values is the same
#    as that used with the ems_clean routine so please consult "ems_clean --help" for
#    detailed information.
#
#    For real-time forecasting applications, set SCOUR = Yes, as this setting
#    will scour initialization and forecast files from previous runs.
#
#    For non real-time forecasting purposes, set SCOUR = No, which will scour output
#    files from previous simulations but retain the initialization dataset(s) in
#    the grib directory.
#
#    Note that SCOUR value below can be overridden with the --scour flag.
#
#  DEFAULT: SCOUR = Yes
#
SCOUR = Yes



#  SLEEP and ATTEMPTS  (REAL-TIME FORECASTS)
#
#    SLEEP is the amount of time, in seconds, between attempts to acquire the dataset(s)
#    used for model initialization. Should an attempt fail, ems_autorun will wait SLEEP
#    seconds before trying again.
#
#    ATTEMPTS specifies the number of attempts to make in acquiring the initialization
#    data before giving up and going on to the next fail-over option in the list.
#
#    Both SLEEP and ATTEMPTS are designed to allow for delays in the availability of
#    operational datasets on remote servers.  A regular occurrence of these parameters
#    being used would indicate that the data acquisition is being started too early.
#
#  DEFAULT: SLEEP = 600  & ATTEMPTS = 3
#
SLEEP = 600
ATTEMPTS = 3



#  WAIT   (REAL-TIME FORECASTS)
#
#    WAIT is the amount of time, in seconds, to wait for a previous run to finish before
#    beginning a new simulation.  The ems_autorun script will look for the existence of
#    a lock file in the $EMS_LOGS (uems/logs) directory. If a lock file is found, then
#    ems_autorun will check the associated PID those processes running on the system.
#    If the PID matches a current process, it is assumed that another UEMS simulation
#    is running and ems_autorun will not begin the new job until either the previous
#    simulation has completed or WAIT seconds has passed.
#
#    If after WAIT seconds the previous run has not finished, the pending run will be
#    terminated.
#
#  DEFAULT:  WAIT = 3600
#
WAIT = 3600


# ==============================================================================================
# THE END OF THE UEMS AUTO RUN CONFIGURATION FILE - WASN'T THAT FUN?
# ==============================================================================================


